import json
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from src.cfg.cfg import mycfg

class Definition:
    def __init__(self, name, instr, block_name):
        self.name = name
        self.instr = instr
        self.block_name = block_name


# Map: block -> list of instructions
block2Definitions = {}

# return the generated defintion given a block name
def get_generated_definition(block):
    gen_b = []
    definitions = block2Definitions[block]

    for definition in definitions:
        for defn in gen_b:
            if defn.instr['dest'] == definition.instr['dest']:
                gen_b.remove(defn)
        gen_b.append(definition)
    return gen_b

# return the killed defintion given a block name
def get_killed_definition(block):
    kill_b = []
    
    gen_def = block2Definitions[block]

    for block in block2Definitions.keys():
        gen_def_block = block2Definitions[block]

        for definition in gen_def:
            for defn in gen_def_block:
                if definition != defn and defn not in kill_b and definition.instr['dest'] == defn.instr['dest']:
                    kill_b.append(defn)
    return kill_b


# add the defintion to the map corresponding to a block
def add_definition(block):
    defn_list = block2Definitions.get(block.name)
    if defn_list == None:
        block2Definitions[block.name] = []

    for instr in block.instrs:
        if 'dest' in instr:
            total_length = sum(len(lst) for lst in block2Definitions.values())
            definition = Definition("d"+str(total_length + 1), instr, block.name)
            block2Definitions[block.name].append(definition)


def handle_blocks(blocks):
    for block in blocks:
        add_definition(block)

def start():
    prog = json.load(sys.stdin)
    for blocks in mycfg(prog):
        handle_blocks(blocks)
    for block in block2Definitions.keys():
        gen_def = get_generated_definition(block)
        kill_def = get_killed_definition(block)
        
        print("Generated by Block " + block)
        for defn in gen_def:
            print(defn.name)

        print("Killed by Block " + block)
        for defn in kill_def:
            print(defn.name)

if __name__ == "__main__":
    start()
